# Example configuration for ComfyFixerSmart

# --- Core Settings ---
# Root directory of your ComfyUI installation.
# comfyui_root = "/path/to/ComfyUI"

# List of directories to scan for workflows.
workflow_dirs = ["workflows/"]

# Directory to save outputs like reports and download scripts.
output_dir = "output/"

# Directory for log files.
log_dir = "log/"

# --- Search Backend Configuration ---
[search]
# Order of search backends to try.
# Available: "civitai", "modelscope", "huggingface"
backend_order = ["civitai", "modelscope"]

# Civitai API key. It's recommended to set this via the
# CIVITAI_API_KEY environment variable for security.
# civitai_api_key = "YOUR_API_KEY_HERE"

# Enable caching for search results to speed up repeated runs.
enable_cache = true

# Time-to-live for cached search results, in seconds (default: 1 day).
cache_ttl = 86400


# --- ComfyUI-Copilot Integration (Optional) ---
[copilot]
# Master switch to enable all Copilot-based features.
# Requires the Copilot backend to be installed as a submodule.
enabled = false

# If enabled, use the Copilot engine for deep workflow validation.
# This requires ComfyUI to be running.
validation = true

# If enabled, allow the Copilot engine to attempt automatic repairs
# on broken workflows.
auto_repair = false

# If true, the tool will fail gracefully if a Copilot feature is
# enabled but ComfyUI is not running. If false, it will proceed
# without using the feature.
require_comfyui = false


# --- State Management Configuration ---
[state]
# Choose the backend for storing state (e.g., download history).
# Options: "json" (default) or "sql".
backend = "json"

# Path for the JSON state directory (if backend is "json").
json_path = "state/"

# Database connection URL (if backend is "sql").
# Requires `sqlalchemy` to be installed.
sql_url = "sqlite:///state/comfyfixer_state.db"


# --- Fallback and Error Handling ---
[fallback]
# Behavior on validation error: "warn", "skip", "fail"
on_validation_error = "warn"

# Behavior on search error: "next_backend", "skip", "fail"
on_search_error = "next_backend"

# Behavior on auto-repair error: "report_only", "skip", "fail"
on_repair_error = "report_only"
