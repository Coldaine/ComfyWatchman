[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "comfywatchman"
version = "2.0.0"
description = "Incremental ComfyUI model downloader with intelligent search and verification"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.7"
authors = [
    {name = "ComfyWatchman Team", email = "comfywatchman@example.com"},
]
maintainers = [
    {name = "ComfyWatchman Team", email = "comfywatchman@example.com"},
]
keywords = ["comfyui", "stable-diffusion", "model-downloader", "automation", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Utilities",
]
dependencies = [
    "requests>=2.25.0",
    "tomli>=1.2.0; python_version < '3.11'",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",  # Unified linter and formatter (replaces Black + flake8)
    "mypy>=0.950",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
# Documentation dependencies
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
# Core Copilot dependencies needed for validation and repair
copilot = [
    "sqlalchemy>=1.4.0,<2.0",
    "python-dotenv>=0.19.0",
    "openai>=1.5.0",
    "aiohttp>=3.8.0",
    "httpx>=0.24.0",
]
# ModelScope-specific dependencies
modelscope = [
    "modelscope>=1.28.0",
]
# Includes all optional dependencies for complete functionality
full = [
    "sqlalchemy>=1.4.0,<2.0",
    "python-dotenv>=0.19.0",
    "openai>=1.5.0",
    "aiohttp>=3.8.0",
    "httpx>=0.24.0",
    "modelscope>=1.28.0",
    "safetensors>=0.4.2",
    "onnx>=1.14.0",
]
inspector = [
    "safetensors>=0.4.2",
    "onnx>=1.14.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/comfywatchman"
Documentation = "https://comfywatchman.readthedocs.io/"
Repository = "https://github.com/yourusername/comfywatchman.git"
Issues = "https://github.com/yourusername/comfywatchman/issues"
Changelog = "https://github.com/yourusername/comfywatchman/blob/main/CHANGELOG.md"

[project.scripts]
comfywatchman = "comfyfixersmart.cli:main"
comfy-inspect = "comfyfixersmart.inspector.cli:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
comfyfixersmart = ["config/*.toml", "templates/*"]

[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=comfywatchman --cov-report=html --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src/comfyfixersmart"]
omit = ["*/tests/*", "*/test_*.py"]

# Ruff - Unified linter and formatter (replaces Black, flake8, isort, pyupgrade)
[tool.ruff]
line-length = 100
target-version = "py37"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    "*.egg-info",
    "scripts",
    "src/copilot_backend",  # External submodule - do not format
    "setup.py",
    "usage_examples.py",
    "tests",
    "docs",
]

[tool.ruff.lint]
# Enable pycodestyle (E/W), pyflakes (F), isort (I), and pyupgrade (UP)
select = ["E", "F", "W", "I", "UP"]
ignore = [
    "E501",  # line too long (handled by formatter)
    "UP006", # non-pep585-annotation (not valid for py37 target)
    "UP045", # non-pep604-annotation-optional (not valid for py37 target)
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in package namespace initializers
"src/comfyfixersmart/__init__.py" = ["F401"]
"src/comfyfixersmart/**/__init__.py" = ["F401"]
# Allow long lines in complex prompt strings and JSON formatting
"src/comfyfixersmart/search.py" = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["comfyfixersmart"]

[tool.ruff.format]
# Use Black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
